1、概述：
一个轻量级、底层的插件，可以介入Django的请求和响应

2、本质：
一个Python类

3、方法：
1）__init__
不需要传参，服务器响应一个请求的时候自动调用，用于确定是否启用该中间件

2）process_request(self, request)
	在执行视图之前被调用(分配url匹配视图之前)，每个请求上都会调用，返回None或者HttpResponse对象

3）process_view(self, request, view_args, view_kwargs)
	调用视图之前执行，每个请求都会调用，每个请求上都会调用，返回None或者HttpResopnse对象

4）process_template_response(self, request, response)
	在视图刚好执行完后调用，每个请求上都会调用，返回None或者HttpResponse对象
	使用render

5) process_response(self, request, response)
	所有的响应返回浏览器之前调用，每个请求上都会调用，返回HttpResponse对象

6) process_exception(self, request, exception)
	当视图抛出异常时调用，返回HttpResponse对象

4、自定义中间件
middleware目录下创建myApp目录
创建一个pyhton文件
from django.utils.deprecation import  MiddlewareMixin
class MyMiddle(MiddlewareMixin):
    def process_request(self, request):
        print("get参数为：",request.GET.get("a"))

5、使用自定义中间件
配置setting.py文件
'middleware.myApp.myMiddle.MyMiddle',




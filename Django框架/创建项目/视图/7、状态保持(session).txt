1、概述：
1）http协议是无状态的，每次请求都是一次新的请求，不记得以前的请求

2）客户端与服务端的一次通信就是一次会话

3）实现状态的保持，在客户端或者是服务端存储有关会话的数据

4）存储的方式
	cookie	所有的数据都存储在客户端，不要存储敏感的数据
	session	所有的数据都存储在服务端，在客户端用cookie存储session_id

5）状态保持的目的
	在一段时间内跟踪请求者的状态，可以实现跨页面访问当前的请求者的数据
注意：不同的请求者之间不会共享这个数据，与请求者是一一对应的

2、启用session
1）setting.py文件中启用
	INSTALLED_APPS 	'django.contrib.sessions',    默认启用
	MIDDLEWARE	'django.contrib.sessions.middleware.SessionMiddleware',    默认启用

2）使用session
启动session后，每个HttpRequest对象都有一个session属性，就是一个类似字典的对象
方法：
	get(key, default=None)	根据键获取session值
	clear()	清空所有的会话
	flush()	删除当前的会话，并删除会话的cookie
#session示例
def main(request):
    #取session
    username = request.session.get('name', default = '游客')
    return render(request, "myApp/main.html", {'username':username})
def login(request):

    return render(request, "myApp/login.html")
def showmain(request):
    username = request.POST.get("username")
    password = request.POST.get("password")
    #存储session
    request.session["name"] = username
    request.session["password"] = password
    request.session[username] = password
    return redirect('/hanyb/main/')
from django.contrib.auth import logout
def quit(request):
    #清除session
    logout(request)    #推荐使用
    # request.session.flush()
    # request.session.clear()
    return redirect('/hanyb/main/')

3、设置过期时间
set_expiry(value)
	1）如果不设置，两个星期后过期
	2）整数
	3）时间对象	
	4）0	关闭浏览器时失效
	5）None	永不过期

4、存储session的位置
1）数据库
	默认存储在数据库中
	    SESSION_ENGINE = 'django.contrib.sessions.backends.db'
2）缓存
	只存储在本地内存中，如果丢失不能找回，比数据库快
	    SESSION_ENGINE = ‘django.contrib.sessions.backends.cache’
3）数据库和缓存
	优先从本地缓存中读取，读取不到再去数据库中获取
	    SESSION_ENGINE = ‘django.contrib.sessions.backends.cache_db’ 

5、使用redis缓存session
	pip instal django-redis-session
	SESSION_ENGINE = 'redis_sessions.session'
	SESSION_REDIS_HOST = 'localhost'
	SESSION_REDIS_PORT =6379 
	SESSION_REDIS_DB = 0
	SESSION_REDIS_PASSWORD = 'sunck'
	SESSION_REDIS_PREFIX = 'session'



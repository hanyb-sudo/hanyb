1、概述：
1.查询集表示从数据库中获取的对象集合
2.查询集可以有多个过滤器
3.过滤器就是一个函数，基于所给的参数限制查询集结果
4.从sql角度来说，查询集和select语句等价，过滤器就像where条件

2、查询集
1）在管理器上调用过滤器方法返回查询集
2）查询集经过过滤器筛选后返回新的查询集，所以就可以写成链式调用
3）惰性执行----创建查询集不会带来任何数据的访问，直到调用数据时，才会访问数据
4）直接访问数据的情况：
	1.迭代
	2.序列化
	3.与if合用
5）返回查询集的方法称为过滤器
	1.all()	返回查询集中的所有数据
	2.filter()	返回符合条件的数据
	    filter(键=值)
	    filter(键=值，键=值)
	    filter(键=值)，filter(键=值)
	3.exclude	过滤掉符合条件的数据
	4.order_by	    排序
	5.values()	一条数据就是一个对象(字典)，返回一个列表

6）返回单个数据
	1.get()	返回一个满足条件的对象
		注意：如果没有找到符合条件的对象，会引发 模型类.DoesNotExist 异常
		         如果找到多个对象，会引发 模型类.MutipleObjectsReturned 异常
	2.count()	返回当前查询集中的对象个数
	3.first()	返回查询集中的第一个对象
	4.last()	返回查询集中的最后一个对象
	5.exists()	判断查询集中是否有数据，是则返回True，否则False

7）限制查询集
查询集返回列表，可以使用下标的方式进行限制，等同于sql中的limit语句
注意：下标不能是负数

8）查询集的缓存
概述：
每个查询集都包含一个缓存，来最小化的对数据库访问

在新建的查询集中，缓存首次为空，第一次对查询集求值，会发生数据缓存，
django会将查询出的数据做一个缓存，并返回查询结果，以后的查询直接使用查询集的缓存

9）字段查询
1.概述
	实现了sql中的where语句，作为方法filter()、exclude()、get()的参数
语法：
	属性名称__比较运算符 = 值
外键：
	属性名__id
转义：
	like语句中使用 %是为了匹配占位，匹配数据中的%(where like '\%')
	filter(sname__contains='%')

2.比较运算符
	exact	判断，大小写敏感
		filter(isDelete = False)
	contains	是否包含，大小写敏感
		studentsList = Students.stuObj.filter(sname__contains="韩")
	startswith、endswith	     以value开头或者结尾，大小写敏感
		studentsList = Students.stuObj.filter(sname__startswith="严")
	以上4个在前面加上i，就表示不区分大小写iexact、icontains、istartswith、iendswith
	
	isnull、isnotnull	是否为空
		filter(sname__isnull=False)

	in	是否包含在范围内
		studentsList = Students.stuObj.filter(pk__in=[5,1,2,3,4])

	gt	大于         studentsList = Students.stuObj.filter(sage__gt=30)
	gte	大于等于
	lt	小于
	lte	小于等于

	year	studentsList = Students.stuObj.filter(lastTime__year=2020)
	month
	day
	week_day
	hour
	minute
	second
	
	跨关联查询：	处理json查询
	语法：模型类名__属性名__比较运算符
	示例：
		#跨关联查询
    		#描述中带有"严茂萍"这三个字的数据是属于哪个班级的
    		gradesList = Grades.objects.filter(students__scontend__contains = "严茂萍")
	
	查询快捷：pk 代表主键

3.聚合函数
使用aggregate()函数返回聚合函数的值
	Avg
	Count	from django.db.models import Max
	Max	maxAge = Students.stuObj.aggregate(Max('sage'))#返回的是字典类型
	Min
	Sum

4.F对象
可以使用模型的A属性和B属性进行比较
#查询女生人数>男生人数的班级
from django.db.models import F,Q
gradesList = Grades.objects.filter(ggirlnum__gt=F('gboynum'))

支持F对象的算术运算
gradesList = Grades.objects.filter(ggirlnum__gt=F('gboynum')+20)


5.Q对象
概述：
过滤器的方法中的关键字参数，条件为And模式

需求：进行or查询
解决：使用Q对象
gradesList = Grades.objects.filter(Q(ggirlnum__gte = 40) | Q(gboynum__gte = 40))
gradesList = Grades.objects.filter(Q(ggirlnum__gte = 40))
注意：只有一个Q对象，就是用于匹配
gradesList = Grades.objects.filter(~Q(ggirlnum__gte = 40))      取反




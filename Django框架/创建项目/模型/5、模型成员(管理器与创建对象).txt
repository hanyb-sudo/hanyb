1.类属性
objects：
是Manager类型的一个对象，作用是与数据库进行交互
当定义模型类时，没有指定管理器，则Django为模型创建一个名为objects的管理器

自定义管理器：
class Students(models.Model):
    # 自定义模型管理器
    #当自定义模型管理器，objects就不存在了
    stuObj = models.Manager()
当为模型指定模型管理器，Django就不在为模型类生成objects模型管理器

自定义管理器Manager类：
模型管理器是Django的模型进行与数据库进行交互的接口，一个模型可以有多个模型管理器
作用：
	1、向管理器类中添加额外的方法
	2、修改管理器返回的原始查询集 -------  重写get_queryset()方法
代码示例：
class StudentsManager(models.Manager):
    def get_queryset(self):
        return super(StudentsManager, self).get_queryset().filter(isDelete = False)
class Students(models.Model):
    # 自定义模型管理器
    #当自定义模型管理器，objects就不存在了
    stuObj = models.Manager()
    stuObj2 = StudentsManager()


2.创建对象
目的：
向数据库中添加数据
当创建对象时，django不会对数据库进行读写操作，当调用save()方式时才与数据库交互，将对象保存到数据库中
注意：__init__方法已经在父类models.Model中使用，在自定义的模型中无法使用

方法：
1、在模型类中增加一个类方法
#定义一个类方法创建对象
@classmethod
def createStudent(cls, name, age, gender, contend, grade, lastT, createT, isD=False):
stu = cls(sname = name, sage = age, sgender = gender, scontend = contend, sgrade = grade, 
lastTime = lastT, createTime = createT)
return stu

2、在定义管理器中添加一个方法
class MyManager(models.Manager):
    def get_queryset(self):
        return super().get_queryset().filter(isDelete = False)
    def createObj(self, name, age, gender, contend, grade, lastT, createT, isD=False):
        stu = self.model()
        print(type(stu))
        stu.sname = name
        stu.sage = age
        stu.sgender = gender
        stu.scontend = contend
        stu.sgrade = grade
        stu.lastTime = lastT
        stu.createTime = createT
        stu.save()
        return stu


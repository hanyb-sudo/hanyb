一、try······except······else语句：

格式：
try:
    语句t
except 错误码 as e:
    语句1
except 错误码 as e:
······
except 错误码 as e:
    语句n
else
    语句e

注意：else语句可有可无

作用：用来检测try语句块中的错误，从而让except语句捕获错误信息并处理

逻辑：当程序执行到try-except-else语句时
1、如果try"语句t"执行出现错误，会匹配第一个错误，如果匹配上就执行对应的"语句"
2、如果try"语句t"执行出现错误，没有匹配的异常，错误将会被提交到上一层的try语句。
     或者到程序的最上层。
3、如果try"语句t"执行没有错误，执行else下的"语句e"（你得有）

example：
1、
try:
    print(3/3)
except ZeroDivisionError as e:
    print("除数不能为0！")
else:
    print("no problem!")


2、#常用的方式，不用指定具体的错误类型
try:
    print(3/0)
except:
    print("出现了错误！")


3、# 使用except带着多种异常
try:
    print(5/0)
except (NameError, ZeroDivisionError):
    print("出现了NameError或ZeroDivisionError")


#特殊
1、错误其实是class(类)，所有的错误都继承自BaseException，
     所以在捕获的时候，它捕获了该类型的错误，还把子类一网打尽。

2、跨越多层调用
example：
def func1(num):
    print(1/num)
def func2(num):
    func1(num)
def main(num):
    func2(num)
try:
    main(0)
except ZeroDivisionError as e:
    print("除数不能为0！")


二、try······except······finally语句

格式：
try:
    语句t
except 错误码 as e:
    语句1
except 错误码 as e:
······
except 错误码 as e:
    语句n
finally：
    语句f

作用：语句t无论是否有错误都将执行最后的语句f


